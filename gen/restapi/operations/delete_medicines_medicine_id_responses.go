// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"
)

// DeleteMedicinesMedicineIDOKCode is the HTTP code returned for type DeleteMedicinesMedicineIDOK
const DeleteMedicinesMedicineIDOKCode int = 200

/*
DeleteMedicinesMedicineIDOK Medicine deleted successfully

swagger:response deleteMedicinesMedicineIdOK
*/
type DeleteMedicinesMedicineIDOK struct {

	/*
	  In: Body
	*/
	Payload string `json:"body,omitempty"`
}

// NewDeleteMedicinesMedicineIDOK creates DeleteMedicinesMedicineIDOK with default headers values
func NewDeleteMedicinesMedicineIDOK() *DeleteMedicinesMedicineIDOK {

	return &DeleteMedicinesMedicineIDOK{}
}

// WithPayload adds the payload to the delete medicines medicine Id o k response
func (o *DeleteMedicinesMedicineIDOK) WithPayload(payload string) *DeleteMedicinesMedicineIDOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the delete medicines medicine Id o k response
func (o *DeleteMedicinesMedicineIDOK) SetPayload(payload string) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DeleteMedicinesMedicineIDOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

// DeleteMedicinesMedicineIDBadRequestCode is the HTTP code returned for type DeleteMedicinesMedicineIDBadRequest
const DeleteMedicinesMedicineIDBadRequestCode int = 400

/*
DeleteMedicinesMedicineIDBadRequest bad request

swagger:response deleteMedicinesMedicineIdBadRequest
*/
type DeleteMedicinesMedicineIDBadRequest struct {

	/*
	  In: Body
	*/
	Payload interface{} `json:"body,omitempty"`
}

// NewDeleteMedicinesMedicineIDBadRequest creates DeleteMedicinesMedicineIDBadRequest with default headers values
func NewDeleteMedicinesMedicineIDBadRequest() *DeleteMedicinesMedicineIDBadRequest {

	return &DeleteMedicinesMedicineIDBadRequest{}
}

// WithPayload adds the payload to the delete medicines medicine Id bad request response
func (o *DeleteMedicinesMedicineIDBadRequest) WithPayload(payload interface{}) *DeleteMedicinesMedicineIDBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the delete medicines medicine Id bad request response
func (o *DeleteMedicinesMedicineIDBadRequest) SetPayload(payload interface{}) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DeleteMedicinesMedicineIDBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

// DeleteMedicinesMedicineIDUnauthorizedCode is the HTTP code returned for type DeleteMedicinesMedicineIDUnauthorized
const DeleteMedicinesMedicineIDUnauthorizedCode int = 401

/*
DeleteMedicinesMedicineIDUnauthorized internal server error

swagger:response deleteMedicinesMedicineIdUnauthorized
*/
type DeleteMedicinesMedicineIDUnauthorized struct {

	/*
	  In: Body
	*/
	Payload interface{} `json:"body,omitempty"`
}

// NewDeleteMedicinesMedicineIDUnauthorized creates DeleteMedicinesMedicineIDUnauthorized with default headers values
func NewDeleteMedicinesMedicineIDUnauthorized() *DeleteMedicinesMedicineIDUnauthorized {

	return &DeleteMedicinesMedicineIDUnauthorized{}
}

// WithPayload adds the payload to the delete medicines medicine Id unauthorized response
func (o *DeleteMedicinesMedicineIDUnauthorized) WithPayload(payload interface{}) *DeleteMedicinesMedicineIDUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the delete medicines medicine Id unauthorized response
func (o *DeleteMedicinesMedicineIDUnauthorized) SetPayload(payload interface{}) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DeleteMedicinesMedicineIDUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}
