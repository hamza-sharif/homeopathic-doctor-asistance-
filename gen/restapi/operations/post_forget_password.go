// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"context"
	"net/http"

	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// PostForgetPasswordHandlerFunc turns a function with the right signature into a post forget password handler
type PostForgetPasswordHandlerFunc func(PostForgetPasswordParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PostForgetPasswordHandlerFunc) Handle(params PostForgetPasswordParams) middleware.Responder {
	return fn(params)
}

// PostForgetPasswordHandler interface for that can handle valid post forget password params
type PostForgetPasswordHandler interface {
	Handle(PostForgetPasswordParams) middleware.Responder
}

// NewPostForgetPassword creates a new http.Handler for the post forget password operation
func NewPostForgetPassword(ctx *middleware.Context, handler PostForgetPasswordHandler) *PostForgetPassword {
	return &PostForgetPassword{Context: ctx, Handler: handler}
}

/*
	PostForgetPassword swagger:route POST /forget-password postForgetPassword

Forget password
*/
type PostForgetPassword struct {
	Context *middleware.Context
	Handler PostForgetPasswordHandler
}

func (o *PostForgetPassword) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewPostForgetPasswordParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// PostForgetPasswordBody post forget password body
//
// swagger:model PostForgetPasswordBody
type PostForgetPasswordBody struct {

	// password
	Password string `json:"password,omitempty"`

	// username
	Username string `json:"username,omitempty"`
}

// Validate validates this post forget password body
func (o *PostForgetPasswordBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this post forget password body based on context it is used
func (o *PostForgetPasswordBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PostForgetPasswordBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostForgetPasswordBody) UnmarshalBinary(b []byte) error {
	var res PostForgetPasswordBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
