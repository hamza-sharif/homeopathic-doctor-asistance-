// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// NewGetPatientsParams creates a new GetPatientsParams object
//
// There are no default values defined in the spec.
func NewGetPatientsParams() GetPatientsParams {

	return GetPatientsParams{}
}

// GetPatientsParams contains all the bound params for the get patients operation
// typically these are obtained from a http.Request
//
// swagger:parameters GetPatients
type GetPatientsParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*Filter by date and time
	  In: query
	*/
	DateTime *strfmt.DateTime
	/*Filter by patient's father or husband's name
	  In: query
	*/
	FatherOrHusbandName *string
	/*Filter by patient mobile number
	  In: query
	*/
	MobileNo *string
	/*Filter by patient name
	  In: query
	*/
	Name *string
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewGetPatientsParams() beforehand.
func (o *GetPatientsParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	qs := runtime.Values(r.URL.Query())

	qDateTime, qhkDateTime, _ := qs.GetOK("dateTime")
	if err := o.bindDateTime(qDateTime, qhkDateTime, route.Formats); err != nil {
		res = append(res, err)
	}

	qFatherOrHusbandName, qhkFatherOrHusbandName, _ := qs.GetOK("fatherOrHusbandName")
	if err := o.bindFatherOrHusbandName(qFatherOrHusbandName, qhkFatherOrHusbandName, route.Formats); err != nil {
		res = append(res, err)
	}

	qMobileNo, qhkMobileNo, _ := qs.GetOK("mobileNo")
	if err := o.bindMobileNo(qMobileNo, qhkMobileNo, route.Formats); err != nil {
		res = append(res, err)
	}

	qName, qhkName, _ := qs.GetOK("name")
	if err := o.bindName(qName, qhkName, route.Formats); err != nil {
		res = append(res, err)
	}
	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindDateTime binds and validates parameter DateTime from query.
func (o *GetPatientsParams) bindDateTime(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		return nil
	}

	// Format: date-time
	value, err := formats.Parse("date-time", raw)
	if err != nil {
		return errors.InvalidType("dateTime", "query", "strfmt.DateTime", raw)
	}
	o.DateTime = (value.(*strfmt.DateTime))

	if err := o.validateDateTime(formats); err != nil {
		return err
	}

	return nil
}

// validateDateTime carries on validations for parameter DateTime
func (o *GetPatientsParams) validateDateTime(formats strfmt.Registry) error {

	if err := validate.FormatOf("dateTime", "query", "date-time", o.DateTime.String(), formats); err != nil {
		return err
	}
	return nil
}

// bindFatherOrHusbandName binds and validates parameter FatherOrHusbandName from query.
func (o *GetPatientsParams) bindFatherOrHusbandName(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		return nil
	}
	o.FatherOrHusbandName = &raw

	return nil
}

// bindMobileNo binds and validates parameter MobileNo from query.
func (o *GetPatientsParams) bindMobileNo(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		return nil
	}
	o.MobileNo = &raw

	return nil
}

// bindName binds and validates parameter Name from query.
func (o *GetPatientsParams) bindName(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		return nil
	}
	o.Name = &raw

	return nil
}
