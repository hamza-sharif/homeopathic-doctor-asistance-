// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"
)

// PutUpdatePriceOKCode is the HTTP code returned for type PutUpdatePriceOK
const PutUpdatePriceOKCode int = 200

/*
PutUpdatePriceOK Password updated successfully

swagger:response putUpdatePriceOK
*/
type PutUpdatePriceOK struct {
}

// NewPutUpdatePriceOK creates PutUpdatePriceOK with default headers values
func NewPutUpdatePriceOK() *PutUpdatePriceOK {

	return &PutUpdatePriceOK{}
}

// WriteResponse to the client
func (o *PutUpdatePriceOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(200)
}

// PutUpdatePriceUnauthorizedCode is the HTTP code returned for type PutUpdatePriceUnauthorized
const PutUpdatePriceUnauthorizedCode int = 401

/*
PutUpdatePriceUnauthorized internal server error

swagger:response putUpdatePriceUnauthorized
*/
type PutUpdatePriceUnauthorized struct {

	/*
	  In: Body
	*/
	Payload interface{} `json:"body,omitempty"`
}

// NewPutUpdatePriceUnauthorized creates PutUpdatePriceUnauthorized with default headers values
func NewPutUpdatePriceUnauthorized() *PutUpdatePriceUnauthorized {

	return &PutUpdatePriceUnauthorized{}
}

// WithPayload adds the payload to the put update price unauthorized response
func (o *PutUpdatePriceUnauthorized) WithPayload(payload interface{}) *PutUpdatePriceUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the put update price unauthorized response
func (o *PutUpdatePriceUnauthorized) SetPayload(payload interface{}) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PutUpdatePriceUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}
