// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"
)

// DeletePatientsPatientIDCreatedCode is the HTTP code returned for type DeletePatientsPatientIDCreated
const DeletePatientsPatientIDCreatedCode int = 201

/*
DeletePatientsPatientIDCreated Patient deleted successfully

swagger:response deletePatientsPatientIdCreated
*/
type DeletePatientsPatientIDCreated struct {

	/*
	  In: Body
	*/
	Payload string `json:"body,omitempty"`
}

// NewDeletePatientsPatientIDCreated creates DeletePatientsPatientIDCreated with default headers values
func NewDeletePatientsPatientIDCreated() *DeletePatientsPatientIDCreated {

	return &DeletePatientsPatientIDCreated{}
}

// WithPayload adds the payload to the delete patients patient Id created response
func (o *DeletePatientsPatientIDCreated) WithPayload(payload string) *DeletePatientsPatientIDCreated {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the delete patients patient Id created response
func (o *DeletePatientsPatientIDCreated) SetPayload(payload string) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DeletePatientsPatientIDCreated) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(201)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

// DeletePatientsPatientIDBadRequestCode is the HTTP code returned for type DeletePatientsPatientIDBadRequest
const DeletePatientsPatientIDBadRequestCode int = 400

/*
DeletePatientsPatientIDBadRequest bad request

swagger:response deletePatientsPatientIdBadRequest
*/
type DeletePatientsPatientIDBadRequest struct {

	/*
	  In: Body
	*/
	Payload interface{} `json:"body,omitempty"`
}

// NewDeletePatientsPatientIDBadRequest creates DeletePatientsPatientIDBadRequest with default headers values
func NewDeletePatientsPatientIDBadRequest() *DeletePatientsPatientIDBadRequest {

	return &DeletePatientsPatientIDBadRequest{}
}

// WithPayload adds the payload to the delete patients patient Id bad request response
func (o *DeletePatientsPatientIDBadRequest) WithPayload(payload interface{}) *DeletePatientsPatientIDBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the delete patients patient Id bad request response
func (o *DeletePatientsPatientIDBadRequest) SetPayload(payload interface{}) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DeletePatientsPatientIDBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

// DeletePatientsPatientIDUnauthorizedCode is the HTTP code returned for type DeletePatientsPatientIDUnauthorized
const DeletePatientsPatientIDUnauthorizedCode int = 401

/*
DeletePatientsPatientIDUnauthorized internal server error

swagger:response deletePatientsPatientIdUnauthorized
*/
type DeletePatientsPatientIDUnauthorized struct {

	/*
	  In: Body
	*/
	Payload interface{} `json:"body,omitempty"`
}

// NewDeletePatientsPatientIDUnauthorized creates DeletePatientsPatientIDUnauthorized with default headers values
func NewDeletePatientsPatientIDUnauthorized() *DeletePatientsPatientIDUnauthorized {

	return &DeletePatientsPatientIDUnauthorized{}
}

// WithPayload adds the payload to the delete patients patient Id unauthorized response
func (o *DeletePatientsPatientIDUnauthorized) WithPayload(payload interface{}) *DeletePatientsPatientIDUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the delete patients patient Id unauthorized response
func (o *DeletePatientsPatientIDUnauthorized) SetPayload(payload interface{}) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DeletePatientsPatientIDUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}
