// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Patient patient
//
// swagger:model Patient
type Patient struct {

	// address
	Address string `json:"address,omitempty"`

	// age
	Age int64 `json:"age,omitempty"`

	// cnic
	Cnic string `json:"cnic,omitempty"`

	// date time
	// Format: date-time
	DateTime strfmt.DateTime `json:"dateTime,omitempty"`

	// father or husband name
	FatherOrHusbandName string `json:"fatherOrHusbandName,omitempty"`

	// gender
	Gender string `json:"gender,omitempty"`

	// mobile no
	MobileNo string `json:"mobileNo,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// patient ID
	PatientID string `json:"patientID,omitempty"`

	// weight
	Weight float64 `json:"weight,omitempty"`
}

// Validate validates this patient
func (m *Patient) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDateTime(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Patient) validateDateTime(formats strfmt.Registry) error {
	if swag.IsZero(m.DateTime) { // not required
		return nil
	}

	if err := validate.FormatOf("dateTime", "body", "date-time", m.DateTime.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this patient based on context it is used
func (m *Patient) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *Patient) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Patient) UnmarshalBinary(b []byte) error {
	var res Patient
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
