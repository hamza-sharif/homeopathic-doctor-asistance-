// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Dashboard dashboard
//
// swagger:model Dashboard
type Dashboard struct {

	// cost monthly
	// Required: true
	CostMonthly *int32 `json:"cost_monthly"`

	// cost today
	// Required: true
	CostToday *int32 `json:"cost_today"`

	// fee
	// Required: true
	Fee *int32 `json:"fee"`

	// patients monthly
	// Required: true
	PatientsMonthly *int32 `json:"patients_monthly"`

	// patients per day
	// Required: true
	PatientsPerDay *int32 `json:"patients_per_day"`
}

// Validate validates this dashboard
func (m *Dashboard) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCostMonthly(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCostToday(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFee(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePatientsMonthly(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePatientsPerDay(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Dashboard) validateCostMonthly(formats strfmt.Registry) error {

	if err := validate.Required("cost_monthly", "body", m.CostMonthly); err != nil {
		return err
	}

	return nil
}

func (m *Dashboard) validateCostToday(formats strfmt.Registry) error {

	if err := validate.Required("cost_today", "body", m.CostToday); err != nil {
		return err
	}

	return nil
}

func (m *Dashboard) validateFee(formats strfmt.Registry) error {

	if err := validate.Required("fee", "body", m.Fee); err != nil {
		return err
	}

	return nil
}

func (m *Dashboard) validatePatientsMonthly(formats strfmt.Registry) error {

	if err := validate.Required("patients_monthly", "body", m.PatientsMonthly); err != nil {
		return err
	}

	return nil
}

func (m *Dashboard) validatePatientsPerDay(formats strfmt.Registry) error {

	if err := validate.Required("patients_per_day", "body", m.PatientsPerDay); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this dashboard based on context it is used
func (m *Dashboard) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *Dashboard) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Dashboard) UnmarshalBinary(b []byte) error {
	var res Dashboard
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
