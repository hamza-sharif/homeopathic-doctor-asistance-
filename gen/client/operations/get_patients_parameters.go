// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetPatientsParams creates a new GetPatientsParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetPatientsParams() *GetPatientsParams {
	return &GetPatientsParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetPatientsParamsWithTimeout creates a new GetPatientsParams object
// with the ability to set a timeout on a request.
func NewGetPatientsParamsWithTimeout(timeout time.Duration) *GetPatientsParams {
	return &GetPatientsParams{
		timeout: timeout,
	}
}

// NewGetPatientsParamsWithContext creates a new GetPatientsParams object
// with the ability to set a context for a request.
func NewGetPatientsParamsWithContext(ctx context.Context) *GetPatientsParams {
	return &GetPatientsParams{
		Context: ctx,
	}
}

// NewGetPatientsParamsWithHTTPClient creates a new GetPatientsParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetPatientsParamsWithHTTPClient(client *http.Client) *GetPatientsParams {
	return &GetPatientsParams{
		HTTPClient: client,
	}
}

/*
GetPatientsParams contains all the parameters to send to the API endpoint

	for the get patients operation.

	Typically these are written to a http.Request.
*/
type GetPatientsParams struct {

	/* Cnic.

	   Filter by patient cnic number
	*/
	Cnic *string

	/* DateTime.

	   Filter by date and time

	   Format: date-time
	*/
	DateTime *strfmt.DateTime

	/* FatherOrHusbandName.

	   Filter by patient's father or husband's name
	*/
	FatherOrHusbandName *string

	/* Limit.

	   Record in one query

	   Format: int32
	*/
	Limit *int32

	/* MobileNo.

	   Filter by patient mobile number
	*/
	MobileNo *string

	/* Name.

	   Filter by patient name
	*/
	Name *string

	/* Offset.

	   how many records we need to skip

	   Format: int32
	*/
	Offset *int32

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get patients params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetPatientsParams) WithDefaults() *GetPatientsParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get patients params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetPatientsParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the get patients params
func (o *GetPatientsParams) WithTimeout(timeout time.Duration) *GetPatientsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get patients params
func (o *GetPatientsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get patients params
func (o *GetPatientsParams) WithContext(ctx context.Context) *GetPatientsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get patients params
func (o *GetPatientsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get patients params
func (o *GetPatientsParams) WithHTTPClient(client *http.Client) *GetPatientsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get patients params
func (o *GetPatientsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithCnic adds the cnic to the get patients params
func (o *GetPatientsParams) WithCnic(cnic *string) *GetPatientsParams {
	o.SetCnic(cnic)
	return o
}

// SetCnic adds the cnic to the get patients params
func (o *GetPatientsParams) SetCnic(cnic *string) {
	o.Cnic = cnic
}

// WithDateTime adds the dateTime to the get patients params
func (o *GetPatientsParams) WithDateTime(dateTime *strfmt.DateTime) *GetPatientsParams {
	o.SetDateTime(dateTime)
	return o
}

// SetDateTime adds the dateTime to the get patients params
func (o *GetPatientsParams) SetDateTime(dateTime *strfmt.DateTime) {
	o.DateTime = dateTime
}

// WithFatherOrHusbandName adds the fatherOrHusbandName to the get patients params
func (o *GetPatientsParams) WithFatherOrHusbandName(fatherOrHusbandName *string) *GetPatientsParams {
	o.SetFatherOrHusbandName(fatherOrHusbandName)
	return o
}

// SetFatherOrHusbandName adds the fatherOrHusbandName to the get patients params
func (o *GetPatientsParams) SetFatherOrHusbandName(fatherOrHusbandName *string) {
	o.FatherOrHusbandName = fatherOrHusbandName
}

// WithLimit adds the limit to the get patients params
func (o *GetPatientsParams) WithLimit(limit *int32) *GetPatientsParams {
	o.SetLimit(limit)
	return o
}

// SetLimit adds the limit to the get patients params
func (o *GetPatientsParams) SetLimit(limit *int32) {
	o.Limit = limit
}

// WithMobileNo adds the mobileNo to the get patients params
func (o *GetPatientsParams) WithMobileNo(mobileNo *string) *GetPatientsParams {
	o.SetMobileNo(mobileNo)
	return o
}

// SetMobileNo adds the mobileNo to the get patients params
func (o *GetPatientsParams) SetMobileNo(mobileNo *string) {
	o.MobileNo = mobileNo
}

// WithName adds the name to the get patients params
func (o *GetPatientsParams) WithName(name *string) *GetPatientsParams {
	o.SetName(name)
	return o
}

// SetName adds the name to the get patients params
func (o *GetPatientsParams) SetName(name *string) {
	o.Name = name
}

// WithOffset adds the offset to the get patients params
func (o *GetPatientsParams) WithOffset(offset *int32) *GetPatientsParams {
	o.SetOffset(offset)
	return o
}

// SetOffset adds the offset to the get patients params
func (o *GetPatientsParams) SetOffset(offset *int32) {
	o.Offset = offset
}

// WriteToRequest writes these params to a swagger request
func (o *GetPatientsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Cnic != nil {

		// query param cnic
		var qrCnic string

		if o.Cnic != nil {
			qrCnic = *o.Cnic
		}
		qCnic := qrCnic
		if qCnic != "" {

			if err := r.SetQueryParam("cnic", qCnic); err != nil {
				return err
			}
		}
	}

	if o.DateTime != nil {

		// query param dateTime
		var qrDateTime strfmt.DateTime

		if o.DateTime != nil {
			qrDateTime = *o.DateTime
		}
		qDateTime := qrDateTime.String()
		if qDateTime != "" {

			if err := r.SetQueryParam("dateTime", qDateTime); err != nil {
				return err
			}
		}
	}

	if o.FatherOrHusbandName != nil {

		// query param fatherOrHusbandName
		var qrFatherOrHusbandName string

		if o.FatherOrHusbandName != nil {
			qrFatherOrHusbandName = *o.FatherOrHusbandName
		}
		qFatherOrHusbandName := qrFatherOrHusbandName
		if qFatherOrHusbandName != "" {

			if err := r.SetQueryParam("fatherOrHusbandName", qFatherOrHusbandName); err != nil {
				return err
			}
		}
	}

	if o.Limit != nil {

		// query param limit
		var qrLimit int32

		if o.Limit != nil {
			qrLimit = *o.Limit
		}
		qLimit := swag.FormatInt32(qrLimit)
		if qLimit != "" {

			if err := r.SetQueryParam("limit", qLimit); err != nil {
				return err
			}
		}
	}

	if o.MobileNo != nil {

		// query param mobileNo
		var qrMobileNo string

		if o.MobileNo != nil {
			qrMobileNo = *o.MobileNo
		}
		qMobileNo := qrMobileNo
		if qMobileNo != "" {

			if err := r.SetQueryParam("mobileNo", qMobileNo); err != nil {
				return err
			}
		}
	}

	if o.Name != nil {

		// query param name
		var qrName string

		if o.Name != nil {
			qrName = *o.Name
		}
		qName := qrName
		if qName != "" {

			if err := r.SetQueryParam("name", qName); err != nil {
				return err
			}
		}
	}

	if o.Offset != nil {

		// query param offset
		var qrOffset int32

		if o.Offset != nil {
			qrOffset = *o.Offset
		}
		qOffset := swag.FormatInt32(qrOffset)
		if qOffset != "" {

			if err := r.SetQueryParam("offset", qOffset); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
